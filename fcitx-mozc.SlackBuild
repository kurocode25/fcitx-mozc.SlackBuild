#!/bin/sh

# Slackware build script for fcitx-mozc

# Copyright 2015-2022 Kuro_CODE25 JAPAN
# All rights reserved.
#
# Licensed under the MIT License.
# See https://opensource.org/licenses/MIT for details.

cd $(dirname $0) ; CWD=$(pwd)

PRGNAM=fcitx-mozc
VERSION=${VERSION:-2.26.4220.102.1}
BUILD=${BUILD:-1}
TAG=${TAG:-_Kuro}
PKGTYPE=${PKGTYPE:-tgz}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
       *) ARCH=$( uname -m ) ;;
  esac
fi

if [ ! -z "${PRINT_PACKAGE_NAME}" ]; then
  echo "$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE"
  exit 0
fi

TMP=${CWD}/tmp
PKG=$TMP/package-$PRGNAM
OUTPUT=${CWD}

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

set -e

# source rev. and version.
ZIPCODE_REL=202011
PROTOBUF_REV=fde7cf7358ec7cd69e8db9be4f1fa6a5c431386a
GYP_REV=caa60026e223fc501e8b337fd5086ece4028b1c6
JAPANESE_USAGE_DICT_REV=e5b3425575734c323e1d947009dd74709437b684
ABSEIL_CPP_REV=0f3bb466b868b523cf1dc9b2aaaed65c77b28862
BREAKPAD_REV=216cea7bca53fa441a3ee0d0f5fd339a3a894224
GOOGLETEST_REV=703bd9caab50b139428cea1aaff9974ebee5742e
JSONCPP_REV=9059f5cad030ba11d37818847443a53918c327b1
MOZC_REV=1882e33b61673b66d63277f82b4c80ae4e506c10
ARCHLINUX_PATCH_REV=49df3d8a64f4a9a7b2712278a8e112c05dc04923

# download source files
echo "download files ..."
wget https://github.com/chromium/gyp/archive/${GYP_REV}/gyp-${GYP_REV}.zip
wget https://github.com/fcitx/mozc/archive/${MOZC_REV}/mozc-${MOZC_REV}.zip
wget https://github.com/hiroyuki-komatsu/japanese-usage-dictionary/archive/${JAPANESE_USAGE_DICT_REV}/japanese-usage-dictionary-${JAPANESE_USAGE_DICT_REV}.zip
wget https://github.com/protocolbuffers/protobuf/archive/${PROTOBUF_REV}/protobuf-${PROTOBUF_REV}.zip
wget https://github.com/abseil/abseil-cpp/archive/${ABSEIL_CPP_REV}/abseil-cpp-${ABSEIL_CPP_REV}.zip
wget https://github.com/google/breakpad/archive/${BREAKPAD_REV}/breakpad-${BREAKPAD_REV}.zip
wget https://github.com/google/googletest/archive/${GOOGLETEST_REV}/googletest-${GOOGLETEST_REV}.zip
wget https://github.com/open-source-parsers/jsoncpp/archive/${JSONCPP_REV}/jsoncpp-${JSONCPP_REV}.zip
wget https://osdn.net/projects/ponsfoot-aur/storage/mozc/jigyosyo-${ZIPCODE_REL}.zip
wget https://osdn.net/projects/ponsfoot-aur/storage/mozc/x-ken-all-${ZIPCODE_REL}.zip
echo "done"

# check files
echo "check download files ..."
md5sum -c checksum.md5
echo "done"

# setup directory
rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
mkdir -p $PRGNAM-$VERSION
cd $PRGNAM-$VERSION

echo "prepare source files..."
# extract files
unzip ${CWD}/x-ken-all-${ZIPCODE_REL}.zip
unzip ${CWD}/jigyosyo-${ZIPCODE_REL}.zip
unzip ${CWD}/mozc-$MOZC_REV.zip
unzip ${CWD}/japanese-usage-dictionary-$JAPANESE_USAGE_DICT_REV.zip
unzip ${CWD}/gyp-$GYP_REV.zip
unzip ${CWD}/protobuf-$PROTOBUF_REV.zip
unzip ${CWD}/googletest-$GOOGLETEST_REV.zip
unzip ${CWD}/jsoncpp-$JSONCPP_REV.zip
unzip ${CWD}/breakpad-$BREAKPAD_REV.zip
unzip ${CWD}/abseil-cpp-$ABSEIL_CPP_REV.zip

# rename directory
mv mozc-$MOZC_REV mozc
mv japanese-usage-dictionary-$JAPANESE_USAGE_DICT_REV japanese_usage_dictionary
mv protobuf-$PROTOBUF_REV protobuf
mv gyp-$GYP_REV gyp
mv googletest-$GOOGLETEST_REV googletest
mv jsoncpp-$JSONCPP_REV jsoncpp
mv breakpad-$BREAKPAD_REV breakpad
mv abseil-cpp-$ABSEIL_CPP_REV abseil-cpp

# chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
  -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;
echo "done"

CFLAGS="${CFLAGS} -fvisibility=hidden"
CXXFLAGS="${CXXFLAGS} -fvisibility=hidden"

# disable fcit5 target
echo "disable fcitx5 target ..."
cd $TMP/$PRGNAM-$VERSION/mozc/src
rm unix/fcitx5/fcitx5.gyp
echo "done"

# Generate zip code seed
echo "Generating zip code seed ..."
PYTHONPATH="$PWD:$PYTHONPATH" python3 dictionary/gen_zip_code_seed.py \
  --zip_code="$TMP/$PRGNAM-$VERSION/x-ken-all.csv" \
  --jigyosyo="$TMP/$PRGNAM-$VERSION/JIGYOSYO.CSV" >> data/dictionary_oss/dictionary09.txt
echo "done"

# Copy third party deps
echo "Copy third party deps ..."
cd $TMP/$PRGNAM-$VERSION
for dep in gyp protobuf japanese_usage_dictionary googletest jsoncpp breakpad abseil-cpp
do
  cp -a $dep mozc/src/third_party/
done
echo "done"

# build fcitx-mozc
echo "build fcitx-mozc ..."
cd $TMP/$PRGNAM-$VERSION/mozc/src
QTDIR=/usr GYP_DEFINES="document_dir=/usr/share/licenses/$PRGNAM use_libzinnia=1" python3 build_mozc.py gyp
sed -i 's|python|python3|' ../scripts/build
TARGETS="server/server.gyp:mozc_server gui/gui.gyp:mozc_tool unix/fcitx/fcitx.gyp:fcitx-mozc" \
  _bldtype=Release ../scripts/build
echo "done"

echo "install files ..."
sed -i 's|"out_linux/\${_bldtype}/gen/unix/fcitx/po/\*.mo"|out_linux/\${_bldtype}/gen/unix/fcitx/po/\*.mo|' \
  ../scripts/install_fcitx
cp -a ../scripts/install_server ./
cp -a ../scripts/install_fcitx ./
PREFIX=${PKG}/usr _bldtype=Release ./install_server
PREFIX=${PKG}/usr _bldtype=Release ./install_fcitx

rm -f $PKG/{,usr/}lib${LIBDIRSUFFIX}/*.la
find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" | grep ELF \
  | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true

# install documents
cd $TMP/$PRGNAM-$VERSION/mozc
mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a \
  AUTHORS CONTRIBUTORS LICENSE README.md \
  $PKG/usr/doc/$PRGNAM-$VERSION
cat $CWD/$PRGNAM.SlackBuild > $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
echo "done"

# make package
echo "make package ..."
cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.$PKGTYPE
echo "done"

# remove source files
echo "remove source files..."
cd ${CWD}
rm ${CWD}/*.zip
rm -rf $TMP
echo "completed!"
