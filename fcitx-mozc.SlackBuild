#! /bin/sh
# Slackware build script for fcitx-mozc
# Issued under The MIT License (MIT)
#
# Copyright 2015 Kuro_CODE25
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

PRGNAM=fcitx-mozc
VERSION=${VERSION:-2.17.2106.102}
BUILD=${BUILD:-1}
TAG=${TAG:-_SBo}

if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i486 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi
CWD=$(pwd)
TMP=${TMP:-/tmp/SBo}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}
BLDTYPE=Release

ZIPCODE_REL=201504
PROTOBUF_REV=172019c40bf548908ab09bfd276074c929d48415
GYP_REV=cdf037c1edc0ba3b5d25f8e3973661efe00980cc
JSONCPP_REV=11086dd6a7eba04289944367ca82cea71299ed70
JAPNESE_USAGE_DICT_REV=10
MOZC_REV=3648b9bf06d5d9b36bed2425640bfd18ae05b588
FONTTOOLS_REV=5ba7d98a4153fad57258fca23b0bcb238717aec3
JSR305_VER=2.0.2
FCITX_PATCH_VER=2.17.2102.102.1

# check fcitx version
echo "checking fcitx version ..."
FCITXVER=`fcitx -v | sed 's/fcitx version: \([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/\1 \2 \3/' | xargs printf "%02d%02d%02d" | xargs expr 1 \* `
echo $FCITXVER
if [ $FCITXVER -ge 40208 ]; then
       echo "fcitx version OK"
else
       echo "ERROR: Please install fcitx version >= 4.2.8"
       exit 1
fi       
rm -r $PKG
echo "downloading source files ..."
git clone https://github.com/google/mozc
git checkout https://github.com/google/mozc.git#commit=${MOZC_REV}
git clone https://github.com/open-source-parsers/jsoncpp
svn checkout http://japanese-usage-dictionary.googlecode.com/svn/trunk --revision $JAPNESE_USAGE_DICT_REV
git clone https://chromium.googlesource.com/external/gyp
git clone https://github.com/google/protobuf
wget http://findbugs.googlecode.com/svn/repos/release-repository/com/google/code/findbugs/jsr305/$JSR305_VER/jsr305-$JSR305_VER.jar
git clone https://github.com/googlei18n/fonttools
wget http://downloads.sourceforge.net/pnsft-aur/x-ken-all-${ZIPCODE_REL}.zip
wget http://downloads.sourceforge.net/pnsft-aur/jigyosyo-${ZIPCODE_REL}.zip
wget http://download.fcitx-im.org/fcitx-mozc/fcitx-mozc-${FCITX_PATCH_VER}.patch
wget http://download.fcitx-im.org/fcitx-mozc/fcitx-mozc-icon.tar.gz
echo "done"

echo "prepare source..."
cd mozc
git checkout ${MOZC_REV}
cd ../jsoncpp
git checkout ${JSONCPP_REV}
cd ../gyp
git checkout ${GYP_REV}
cd ../protobuf
git checkout ${PROTOBUF_REV}
cd ../fonttools
git checkout ${FONTTOOLS_REV}
cd ../

unzip x-ken-all-${ZIPCODE_REL}.zip
unzip jigyosyo-${ZIPCODE_REL}.zip
tar -xvf fcitx-mozc-icon.tar.gz
mv trunk japanese_usage_dictionary

echo "make checksum.md5 ..."
md5sum -c checksum.md5

echo -n "Do you continue ? (y/n)"
read ans
if [ "$ans" = "n" ]; then
	echo "interrupted.."
	exit 1
elif [ "$ans" = "y" ]; then
	echo "continue ..."
fi
echo "prepare making package ..."
cd mozc/src

# Apply fcitx patch

echo "Apply fcitx patch ..."
rm unix/fcitx -rf
patch -Np2 -i "$CWD/fcitx-mozc-${FCITX_PATCH_VER}.patch"

# Generate zip code seed
echo "Generating zip code seed ..."
python2 dictionary/gen_zip_code_seed.py --zip_code="${CWD}/x-ken-all.csv" --jigyosyo="${CWD}/JIGYOSYO.CSV" >> data/dictionary_oss/dictionary09.txt
echo "Done."

# Copy third party deps
echo "Copy third party deps ..."
cd "$CWD"
for dep in jsoncpp gyp protobuf japanese_usage_dictionary fonttools
do
  cp -a $dep mozc/src/third_party/
done

install -D jsr305-$JSR305_VER.jar mozc/src/third_party/jsr305/jsr305-$JSR305_VER.jar

echo "build package..."
# Update: Fix qt4 include path too
# Fix compatibility with google-glog 0.3.3 (symbol conflict)
CFLAGS="${CFLAGS} -I/usr/lib/qt/include -fvisibility=hidden"
CXXFLAGS="${CXXFLAGS} -I/usr/lib/qt/include -fvisibility=hidden"
# CFLAGS+=" $_qti"
# CXXFLAGS+=" $_qti"

# CFLAGS="${CFLAGS} -I/usr/include/qt4 -fvisibility=hidden"
# CXXFLAGS="${CXXFLAGS} -I/usr/include/qt4 -fvisibility=hidden"
cd mozc/src

_targets="server/server.gyp:mozc_server gui/gui.gyp:mozc_tool unix/fcitx/fcitx.gyp:fcitx-mozc"

QTDIR=/usr/lib/qt GYP_DEFINES="document_dir=/usr/share/licenses/$pkgname" python2 build_mozc.py gyp
sed -i 's|command = $cxx -MMD -MF $out.d $defines $includes $cflags $cflags_cc $cflags_pch_cc -c $in -o $out|command = $cxx -MMD -MF $out.d $defines $includes -D__STRICT_ANSI__ $cflags $cflags_cc $cflags_pch_cc -c $in -o $out|' out_linux/Release/build.ninja
python2 build_mozc.py build -c $BLDTYPE -j 8 $_targets

# Extract license part of mozc
head -n 29 server/mozc_server.cc > LICENSE

BLDTYPE=Release
cd mozc/src

install -D -m 755 out_linux/${BLDTYPE}/mozc_server "${PKG}/usr/lib/mozc/mozc_server"
install    -m 755 out_linux/${BLDTYPE}/mozc_tool   "${PKG}/usr/lib/mozc/mozc_tool"

install -d "${PKG}/usr/share/licenses/$pkgname/"
install -m 644 LICENSE data/installer/*.html "${PKG}/usr/share/licenses/${pkgname}/"

for mofile in out_linux/${BLDTYPE}/gen/unix/fcitx/po/*.mo
do
  filename=`basename $mofile`
  lang=${filename/.mo/}
  install -D -m 644 "$mofile" "${PKG}/usr/share/locale/$lang/LC_MESSAGES/fcitx-mozc.mo"
done

install -D -m 755 out_linux/${BLDTYPE}/fcitx-mozc.so "${PKG}/usr/lib/fcitx/fcitx-mozc.so"
install -D -m 644 unix/fcitx/fcitx-mozc.conf "${PKG}/usr/share/fcitx/addon/fcitx-mozc.conf"
install -D -m 644 unix/fcitx/mozc.conf "${PKG}/usr/share/fcitx/inputmethod/mozc.conf"

install -d "${PKG}/usr/share/fcitx/mozc/icon"
install -m 644 "$CWD/fcitx-mozc-icons/mozc.png" "${PKG}/usr/share/fcitx/mozc/icon/mozc.png"
install -m 644 "$CWD/fcitx-mozc-icons/mozc-alpha_full.png" "${PKG}/usr/share/fcitx/mozc/icon/mozc-alpha_full.png"
install -m 644 "$CWD/fcitx-mozc-icons/mozc-alpha_half.png" "${PKG}/usr/share/fcitx/mozc/icon/mozc-alpha_half.png"
install -m 644 "$CWD/fcitx-mozc-icons/mozc-direct.png" "${PKG}/usr/share/fcitx/mozc/icon/mozc-direct.png"
install -m 644 "$CWD/fcitx-mozc-icons/mozc-hiragana.png" "${PKG}/usr/share/fcitx/mozc/icon/mozc-hiragana.png"
install -m 644 "$CWD/fcitx-mozc-icons/mozc-katakana_full.png" "${PKG}/usr/share/fcitx/mozc/icon/mozc-katakana_full.png"
install -m 644 "$CWD/fcitx-mozc-icons/mozc-katakana_half.png" "${PKG}/usr/share/fcitx/mozc/icon/mozc-katakana_half.png"
install -m 644 "$CWD/fcitx-mozc-icons/mozc-dictionary.png" "${PKG}/usr/share/fcitx/mozc/icon/mozc-dictionary.png"
install -m 644 "$CWD/fcitx-mozc-icons/mozc-properties.png" "${PKG}/usr/share/fcitx/mozc/icon/mozc-properties.png"
install -m 644 "$CWD/fcitx-mozc-icons/mozc-tool.png" "${PKG}/usr/share/fcitx/mozc/icon/mozc-tool.png"

mkdir -p $PKG/install

# install slack-desc
cd $CWD
cat slack-desc > $PKG/install/slack-desc

cd $PKG
/sbin/makepkg $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz}
